package io.github.georgerng;

import javax.imageio.ImageIO;
import java.awt.*;
import java.awt.image.BufferedImage;
import java.awt.image.DataBufferInt;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import java.util.Objects;

public class Main {
    public static FileWriter output = null;
    private static List<String> grayscale = List.of("0","8","7","F");

    public static void main(String[] args) throws IOException {

        File out = new File("./main.mcfunction");
        if(out.createNewFile()) System.out.println("There was already an output file, so it has been overwritten.");
        output = new FileWriter(out);
        output.write("""
                ##
                 # main.builder.mcfunction
                 # imagedata
                 #
                 # Created by GeorgeRNG.
                 #
                 # This file is autogenerated.
                ##
                
                """);

        int nameLen = 3;
        int frames;
        if(args.length == 0) {
            frames = 100;
        }
        else {
            frames = Integer.parseInt(args[0]);
        }

        for (int i = frames - 1; i >= 0; i-= 1) {
            try {
                parseFrame(new File("./frames/frame" + padLeft(String.valueOf(i + 1), nameLen) + ".bmp"),i);
                if(i % 10 == 0) System.out.println(100 * (frames - i) / frames);
            }
            catch (Exception e) {
                System.out.println("Frame" + i + ": " + e.getMessage());
            }
        }

        output.close();
    }

    private static void parseFrame(File file, int index) throws IOException {
        BufferedImage original = ImageIO.read(file);
        BufferedImage image = new BufferedImage(original.getWidth(), original.getHeight(), BufferedImage.TYPE_INT_RGB);

        Graphics2D g = image.createGraphics();
        g.drawImage(original, 0, 0, original.getWidth(), original.getHeight(), null);
        g.dispose();

        int[] data = ((DataBufferInt) image.getRaster().getDataBuffer()).getData();

        StringBuilder command = new StringBuilder("execute as @e[type=minecraft:text_display,tag=video,tag=");
        command.append(index);
        command.append("] run data merge entity @s {Tags:[\"video\",\"");
        command.append(index + 1);
        command.append("\"],text:\"\\\"");

        String lastColor = null;
        int lineI = 0;
        int pixelI = 0;
        int width = image.getWidth(); // chunk size to divide
        for(int i = 0; i < data.length; i += width){
            lineI++;
            if(lineI % 3 == 0) {
                int[] line = Arrays.copyOfRange(data, i, i+width);
                for (int pixel: line) {
                    pixelI++;
                    if(pixelI % 3 == 0) {
                        String color = getCode(pixel);
                        if(!Objects.equals(lastColor, color)) {
                            command.append("§"); // §r
                            command.append(color);
                            command.append("§l");
                            lastColor = color;
                        }
                        command.append("█");
                    }
                }
                command.append("\\\\n");
                lastColor = null;
            }
        }
        command.replace(command.length() - 3,command.length(),"");
        command.append("\\\"\"}\n");
        output.write(command.toString());
    }

    private static String getCode(int color) {
        int colour = (int) (((color & 0xAA) * 1.25490196078431) / 64);
        return grayscale.get(colour);
        // boolean i = color > (0xAA_AA_AA / 2);
        // int min = i ? 0xAA : 0x55;
        // int r = ((0xFF0000 & color) >> 16) > min ? 1 : 0;
        // int g = ((0x00FF00 & color) >>  8) > min ? 1 : 0;
        // int b = ((0x0000FF & color)      ) > min ? 1 : 0;
        // System.out.println(r);
        // return Integer.toHexString(((i ? 1 : 0) << 3) + (r << 2) + (g << 1) + (b));
    }

    private static String padLeft(String number, int zeros) {
        try {
            return "0".repeat(Math.max(0, zeros)).substring(number.length()) + number;
        } catch (Exception ignored) {
            return number;
        }
    }
}