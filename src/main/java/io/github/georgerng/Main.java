package io.github.georgerng;

import javax.imageio.ImageIO;
import java.awt.image.BufferedImage;
import java.awt.image.DataBufferByte;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Arrays;

public class Main {
    public static FileWriter output = null;

    public static void main(String[] args) throws IOException {
        File out = new File("./main.mcfunction");
        if(!out.exists()) {
            out.createNewFile();
        }
        output = new FileWriter(out);
        output.write("""
                ##
                 # main.builder.mcfunction
                 # badapple
                 #
                 # Created by GeorgeRNG.
                 #
                 # This file is autogenerated.
                ##
                effect give @a invisibility 1000000 255 true
                effect give @a resistance 1000000 255 true
                effect give @a haste 1000000 255 true
                
                """);

        int nameLen = 3;
        int frames = Integer.parseInt(args[0]);

        for (int i = frames - 1; i >= 0; i-= 1) {
            try {
                parseFrame(new File("./frames/frame" + padLeft(String.valueOf(i + 1), nameLen) + ".bmp"),i);
                if(i % 10 == 0) System.out.println(100 * (frames - i) / frames);
            }
            catch (Exception e) {
                System.out.println("Frame" + i + ": " + e.getMessage());
            }
        }

        output.close();
    }

    private static void parseFrame(File file, int index) throws IOException {
        BufferedImage image = ImageIO.read(file);
        byte[] data = ((DataBufferByte) image.getRaster().getDataBuffer()).getData();

        StringBuilder command = new StringBuilder("execute as @e[type=minecraft:text_display,tag=badapple,tag=");
        command.append(index);
        command.append("] run data merge entity @s {Tags:[\"badapple\",\"");
        command.append(index + 1);
        command.append("\"],text:\"\\\"");

        int lineI = 0;
        int pixelI = 0;
        int width = image.getWidth() * 3; // chunk size to divide
        for(int i = 0; i < data.length; i += width){
            lineI++;
            if(lineI % 2 != 0 && lineI % 3 != 0) {
                byte[] line = Arrays.copyOfRange(data, i, i+width);
                for(int a = 0; a < line.length; a += 3) {
                    pixelI++;
                    if(pixelI % 2 != 0 && lineI % 3 != 0) {
                        byte[] pixel = Arrays.copyOfRange(line, a, a+3);
                        command.append("§");
                        command.append((pixel[0] + pixel[1] + pixel[2]) < -1 ? "F" : "0");
                        command.append("█");
                    }
                }
                command.append("\\\\n");
            }
        }
        command.replace(command.length() - 3,command.length(),"");
        command.append("\\\"\"}\n");
        output.write(command.toString());
    }

    private static String padLeft(String number, int zeros) {
        try {
            return "0".repeat(Math.max(0, zeros)).substring(number.length()) + number;
        } catch (Exception ignored) {
            return number;
        }
    }
}